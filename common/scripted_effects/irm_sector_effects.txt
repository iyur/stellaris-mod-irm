# This = Country
# Make a dummy country to hold sector entities
irm_sector_make_dummy = {
	create_country = {
		name = root
		type = irm_country_sector
		auto_delete = no
		ignore_initial_colony_error = yes
		day_zero_contact = no
		contact_rule = on_action_only
		species = root.owner_species
		civics = root
		ethos = root
		flag = root
	}
	last_created_country = {
		set_name = {
			key = irm.ui.sector.country
			variable_string = "\\[Root.GetName]"
		}
		set_country_flag = irm_country_sector_@root
		copy_flags_and_variables_from = root
		copy_ethos_and_authority = root
		set_faction_hostility = { target = root set_hostile = no set_neutral = no set_friendly = yes }
		log = "created sectors dummy for \\[Prev.GetName] empire"
	}
}

# This = Sector
# Prev = Country
# Creates constructor for the given sector
irm_sector_make_constructor = {
	prev = {
		# get modifiers for construction cost
		export_modifier_to_variable = {
			modifier = shipclass_constructor_build_cost_mult
			variable = irm_constructor_cost
		}
		change_variable = { which = irm_constructor_cost value = 1 }
		multiply_variable = { which = irm_constructor_cost value = 100 }
		if = {
			limit = { has_resource = { type = alloys amount < irm_constructor_cost } }
			log = "not enough resources for \\[Prev.GetName]"
		}
		else = {
			add_resource = { alloys = -1 mult = irm_constructor_cost }
			create_fleet = {
				effect = {
					set_owner = prev
					set_location = prevprev.sector_capital
					set_fleet_flag = irm_sector_constructor_@prevprev
					set_name = {
						key = irm.ui.sector.constructor
						variable_string = "\\[PrevPrev.GetName]"
					}

					create_ship = {
						name = random
						random_existing_design = constructor
					}

					random_country = {
						limit = {
							is_country_type = irm_country_sector
							has_country_flag = irm_country_sector_@prevprev
						}
						prev = { set_owner = prev }
					}

				}
			}
			log = "constructor built for \\[Prev.GetName]"
		}
		irm_unset = { which = irm_constructor_cost }
	}
}

# This = Sector
# Prev = Country (Player)
# Check if sector can expand and send constructor here
irm_sector_try_expand = {
	owner = {
		export_modifier_to_variable = {
			modifier = starbase_outpost_cost_mult
			variable = irm_outpost_cost
		}
		change_variable = { which = irm_outpost_cost value = 1 }
		set_variable = { which = irm_outpost_cost_alloys value = irm_outpost_cost }
		set_variable = { which = irm_outpost_cost_influence value = irm_outpost_cost }
		multiply_variable = { which = irm_outpost_cost_alloys value = 100 }
		multiply_variable = { which = irm_outpost_cost_influence value = 75 }
	}
	if = {
		limit = {
			not = {
				any_country = {
					is_country_type = irm_country_sector
					has_country_flag = irm_country_sector_@prev.owner
					any_owned_fleet = {
						has_fleet_flag = irm_sector_constructor_@prevprev
					}
				}
			}
		}
		irm_sector_make_constructor = yes
	}
	else_if = {
		limit = {
			owner = {
				or = {
					has_resource = { type = alloys amount < irm_outpost_cost_alloys }
					has_resource = { type = alloys amount < irm_outpost_cost_influence }
				}
			}
		}
		log = "\\[Prev.GetName] has no resources for outpost"
	}
	else = {
		# pick the system from where we could expand
		random_system_within_border = {
			limit = {
				not = { irm_system_is_sector_max_extent = yes }
				any_neighbor_system = { irm_system_can_expand = yes }
			}
			random_neighbor_system = {
				limit = { irm_system_can_expand = yes }
				if = {
					limit = { exists = this }
					prevprev = {
						save_event_target_as = irm_sector_expanding
						owner = {
							add_resource = { alloys = -1 mult = irm_outpost_cost_alloys }
							add_resource = { influence = -1 mult = irm_outpost_cost_influence }
						}
					}
					random_country = {
						limit = {
							is_country_type = irm_country_sector
							has_country_flag = irm_country_sector_@prevprev.owner
						}
						random_owned_fleet = {
							limit = {
								has_fleet_flag = irm_sector_constructor_@prevprevprev.sector
								is_fleet_idle = yes
							}
							irm_fleet_build_outpost = { target = prevprev }
						}
					}
					log = "constructor sent to \\[This.GetName] for expansion"
				}
			}
		}
	}
	owner = {
		irm_unset = { which = irm_outpost_cost }
		irm_unset = { which = irm_outpost_cost_alloys }
		irm_unset = { which = irm_outpost_cost_influence }
	}
}

# This = Sector
# Prev = Planet (target)
# Creates colony ship for sector
irm_sector_make_colonizer = {
	owner = {
		# get modifiers for construction cost
		export_modifier_to_variable = {
			modifier = shipclass_colonizer_build_cost_mult
			variable = irm_colonizer_cost
		}
		change_variable = { which = irm_colonizer_cost value = 1 }
		multiply_variable = { which = irm_colonizer_cost value = @colony_cost_base }
		set_variable = { which = irm_colonizer_cost_energy value = irm_colonizer_cost }
		set_variable = { which = irm_colonizer_cost_minerals value = irm_colonizer_cost }
		set_variable = { which = irm_colonizer_cost_food value = irm_colonizer_cost }
		if = {
			limit = {
				or = {
					has_resource = { type = alloys amount < irm_colonizer_cost_energy }
					has_resource = { type = alloys amount < irm_colonizer_cost_minerals }
					has_resource = { type = alloys amount < irm_colonizer_cost_food }
				}
			}
			log = "\\[Prev.GetName] has no resources for colonizer"
		}
		else = {
			add_resource = { energy = -1 mult = irm_colonizer_cost_energy }
			add_resource = { minerals = -1 mult = irm_colonizer_cost_minerals }
			add_resource = { food = -1 mult = irm_colonizer_cost_food }

			create_fleet = {
				effect = {
					set_owner = prev
					set_location = prevprevprev.planet # REWRITE
					set_fleet_flag = irm_sector_colonizer_@prevprev
					set_name = {
						key = irm.ui.sector.colonizer
						variable_string = "\\[PrevPrev.GetName]"
					}

					create_ship = {
						name = random
						random_existing_design = colonizer
						colonizer_species = prevprevprev.species
					}

					random_country = {
						limit = {
							is_country_type = irm_country_sector
							has_country_flag = irm_country_sector_@prevprev
						}
						prev = { set_owner = prev }
					}

				}
			}
			log = "colonizer (\\[PrevPrev.GetSpeciesName]) built by \\[Prev.GetName]"
		}
		irm_unset = { which = irm_colonizer_cost }
		irm_unset = { which = irm_colonizer_cost_energy }
		irm_unset = { which = irm_colonizer_cost_minerals }
		irm_unset = { which = irm_colonizer_cost_food }
	}
}

# This = Sector
# Prev = Country (Player)
# Check if sector can colonize and send ships
irm_sector_try_colonize = {
	# find the planet we should colonize
	random_system_within_border = {
		limit = {
			any_system_planet = {
				irm_is_colonizable = yes
				can_colonize = { who = prevprev.owner status = yes }
			}
		}
		random_system_planet = {
			limit = {
				irm_is_colonizable = yes
				can_colonize = { who = prevprev.owner status = yes }
			}
			if = {
				limit = { exists = this }
				# pick up a suitable species
				space_owner = {
					log = "test"
					random_owned_pop_group = {
						limit = {
							exists = planet.sector
							planet.sector = { is_same_value = prevprevprev.sector }
						}
						weights = {
							# sad, but we can't use scripted value to check
							base = 0.001
							modifier = {
								add = 10
								prevprev = { habitability = { who = prev.species value >= 0.1 } }
							}
							modifier = {
								add = 10
								prevprev = { habitability = { who = prev.species value >= 0.2 } }
							}
							modifier = {
								add = 10
								prevprev = { habitability = { who = prev.species value >= 0.3 } }
							}
							modifier = {
								add = 10
								prevprev = { habitability = { who = prev.species value >= 0.4 } }
							}
							modifier = {
								add = 10
								prevprev = { habitability = { who = prev.species value >= 0.5 } }
							}
							modifier = {
								add = 10
								prevprev = { habitability = { who = prev.species value >= 0.6 } }
							}
							modifier = {
								add = 10
								prevprev = { habitability = { who = prev.species value >= 0.7 } }
							}
							modifier = {
								add = 10
								prevprev = { habitability = { who = prev.species value >= 0.8 } }
							}
							modifier = {
								add = 10
								prevprev = { habitability = { who = prev.species value >= 0.9 } }
							}
							modifier = {
								add = 10
								prevprev = { habitability = { who = prev.species value  = 1.0 } }
							}
						}
						# and make a colonizer, if not exists
						planet.sector = {
							if = {
								limit = { not = { irm_sector_has_fleet = { type = colonizer } } }
								irm_sector_make_colonizer = yes
							}
						}
					}
				}
				# proceed colonization
				random_country = {
					limit = {
						is_country_type = irm_country_sector
						has_country_flag = irm_country_sector_@prevprev.owner
					}
					random_owned_fleet = {
						limit = {
							has_fleet_flag = irm_sector_colonizer_@prevprevprev.sector
							is_fleet_idle = yes
						}
						irm_fleet_colonize = { target = prevprev }
					}
				}
				log = "colonizer sent to \\[This.GetName]"
			}
		}
	}
}

# This = Sector
# Prev = Country (Player)
# Simulate sector agenda
irm_sector_update_agenda = {
	switch = {
		trigger = has_sector_flag
		irm_ui_sector_agenda_logistics = {
			owner = {
				add_modifier = {
					modifier = irm_sector_agenda_logistics
					multiplier = value:irm_count_logistic_bases_
					days = 30
				}
			}
		}
		default = {}
	}
}